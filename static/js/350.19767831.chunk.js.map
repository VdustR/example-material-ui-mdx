{"version":3,"sources":["../node_modules/prismjs/components/prism-xquery.js"],"names":["Prism","languages","xquery","extend","xquery-comment","pattern","greedy","alias","string","extension","variable","axis","lookbehind","keyword-operator","keyword","function","xquery-element","xquery-attribute","builtin","number","operator","punctuation","tag","inside","rest","stringifyToken","token","content","map","join","hooks","add","env","language","walkTokens","tokens","openedTags","i","length","notTagNorBrace","type","tagName","pop","push","openedBraces","plainText","splice","test","Token"],"mappings":"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","file":"static/js/350.19767831.chunk.js","sourcesContent":["(function (Prism) {\n  Prism.languages.xquery = Prism.languages.extend('markup', {\n    'xquery-comment': {\n      pattern: /\\(:[\\s\\S]*?:\\)/,\n      greedy: true,\n      alias: \"comment\"\n    },\n    'string': {\n      pattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,\n      greedy: true\n    },\n    'extension': {\n      pattern: /\\(#.+?#\\)/,\n      alias: 'symbol'\n    },\n    'variable': /\\$[\\w-:]+/,\n    'axis': {\n      pattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    'keyword-operator': {\n      pattern: /(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,\n      lookbehind: true,\n      alias: 'operator'\n    },\n    'keyword': {\n      pattern: /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,\n      lookbehind: true\n    },\n    'function': /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\n    'xquery-element': {\n      pattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,\n      lookbehind: true,\n      alias: 'tag'\n    },\n    'xquery-attribute': {\n      pattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,\n      lookbehind: true,\n      alias: 'attr-name'\n    },\n    'builtin': {\n      pattern: /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,\n      lookbehind: true\n    },\n    'number': /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,\n    'operator': [/[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/, {\n      pattern: /(\\s)-(?=\\s)/,\n      lookbehind: true\n    }],\n    'punctuation': /[[\\](){},;:/]/\n  });\n  Prism.languages.xquery.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i;\n  Prism.languages.xquery['tag'].inside['attr-value'].pattern = /=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i;\n  Prism.languages.xquery['tag'].inside['attr-value'].inside['punctuation'] = /^=\"|\"$/;\n  Prism.languages.xquery['tag'].inside['attr-value'].inside['expression'] = {\n    // Allow for two levels of nesting\n    pattern: /{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}/,\n    inside: {\n      rest: Prism.languages.xquery\n    },\n    'alias': 'language-xquery'\n  }; // The following will handle plain text inside tags\n\n  var stringifyToken = function stringifyToken(token) {\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function walkTokens(tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') {// Autoclosed tag, ignore\n            } else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{' && ( // Ignore `{{`\n        !tokens[i + 1] || tokens[i + 1].type !== 'punctuation' || tokens[i + 1].content !== '{') && (!tokens[i - 1] || tokens[i - 1].type !== 'plain-text' || tokens[i - 1].content !== '{')) {\n          // Here we might have entered an XQuery expression inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left an XQuery expression inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else if (token.type !== 'comment') {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside an XQuery expression.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          if (/^\\s+$/.test(plainText)) {\n            tokens[i] = plainText;\n          } else {\n            tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n          }\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'xquery') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(Prism);"],"sourceRoot":""}