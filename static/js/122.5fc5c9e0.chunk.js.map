{"version":3,"sources":["../node_modules/prismjs/components/prism-haxe.js"],"names":["Prism","languages","haxe","extend","string","pattern","greedy","inside","interpolation","lookbehind","alias","keyword","operator","insertBefore","regex","preprocessor","metadata","reification","rest"],"mappings":"6EAAAA,MAAAC,UAAAC,KAAAF,MAAAC,UAAAE,OAAA,SAEAC,OAAA,CACAC,QAAA,oCACAC,QAAA,EACAC,OAAA,CACAC,cAAA,CACAH,QAAA,+BACAI,YAAA,EACAF,OAAA,CACAC,cAAA,CACAH,QAAA,SACAK,MAAA,gBAQAC,QAAA,wRACAC,SAAA,+DAEAZ,MAAAC,UAAAY,aAAA,qBACAC,MAAA,CACAT,QAAA,oCACAC,QAAA,KAGAN,MAAAC,UAAAY,aAAA,kBACAE,aAAA,CACAV,QAAA,OACAK,MAAA,WAEAM,SAAA,CACAX,QAAA,SACAK,MAAA,UAEAO,YAAA,CACAZ,QAAA,mBACAK,MAAA,cAGAV,MAAAC,UAAAC,KAAA,OAAAK,OAAA,cAAAA,OAAAW,KAAAlB,MAAAC,UAAAC,YACAF,MAAAC,UAAAC,KAAA","file":"static/js/122.5fc5c9e0.chunk.js","sourcesContent":["Prism.languages.haxe = Prism.languages.extend('clike', {\n  // Strings can be multi-line\n  'string': {\n    pattern: /([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,\n        lookbehind: true,\n        inside: {\n          'interpolation': {\n            pattern: /^\\$\\w*/,\n            alias: 'variable' // See rest below\n\n          }\n        }\n      }\n    }\n  },\n  // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n  'keyword': /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,\n  'operator': /\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/\n});\nPrism.languages.insertBefore('haxe', 'class-name', {\n  'regex': {\n    pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,\n    greedy: true\n  }\n});\nPrism.languages.insertBefore('haxe', 'keyword', {\n  'preprocessor': {\n    pattern: /#\\w+/,\n    alias: 'builtin'\n  },\n  'metadata': {\n    pattern: /@:?\\w+/,\n    alias: 'symbol'\n  },\n  'reification': {\n    pattern: /\\$(?:\\w+|(?=\\{))/,\n    alias: 'variable'\n  }\n});\nPrism.languages.haxe['string'].inside['interpolation'].inside.rest = Prism.languages.haxe;\ndelete Prism.languages.haxe['class-name'];"],"sourceRoot":""}