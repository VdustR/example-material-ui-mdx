{"version":3,"sources":["../node_modules/prismjs/components/prism-smarty.js"],"names":["Prism","languages","smarty","comment","delimiter","pattern","alias","string","number","variable","lookbehind","function","attr-name","inside","operator","punctuation","keyword","hooks","add","env","smartyLitteralMode","buildPlaceholders","match","tokenizePlaceholders"],"mappings":"8EAIA,SAAAA,GACAA,EAAAC,UAAAC,OAAA,CACAC,QAAA,mBACAC,UAAA,CACAC,QAAA,WACAC,MAAA,eAEAC,OAAA,mCACAC,OAAA,2DACAC,SAAA,8BACAJ,QAAA,mBACAK,YAAA,GACK,CACLL,QAAA,sBACAK,YAAA,IAEAC,SAAA,EACAN,QAAA,qBACAK,YAAA,GACK,mCACLE,YAAA,CAEAP,QAAA,2BACAQ,OAAA,CACAJ,SAAA,CACAJ,QAAA,kBACAK,YAAA,GAEAI,SAAA,MAGAC,YAAA,oBACAD,SAAA,uIACAE,QAAA,oCAGAhB,EAAAiB,MAAAC,IAAA,2BAAAC,GACA,IAGAC,GAAA,EACApB,EAAAC,UAAA,qBAAAoB,kBAAAF,EAAA,SAJA,iCAIA,SAAAG,GAMA,MARA,eAIAA,IACAF,GAAA,IAGAA,IATA,cAUAE,IACAF,GAAA,IAGA,OAOApB,EAAAiB,MAAAC,IAAA,0BAAAC,GACAnB,EAAAC,UAAA,qBAAAsB,qBAAAJ,EAAA,YA5DA,CA8DCnB","file":"static/js/296.5c0a35a3.chunk.js","sourcesContent":["/* TODO\n\tAdd support for variables inside double quoted strings\n\tAdd support for {php}\n*/\n(function (Prism) {\n  Prism.languages.smarty = {\n    'comment': /\\{\\*[\\s\\S]*?\\*\\}/,\n    'delimiter': {\n      pattern: /^\\{|\\}$/i,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n    'variable': [/\\$(?!\\d)\\w+/, /#(?!\\d)\\w+#/, {\n      pattern: /(\\.|->)(?!\\d)\\w+/,\n      lookbehind: true\n    }, {\n      pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n      lookbehind: true\n    }],\n    'function': [{\n      pattern: /(\\|\\s*)@?(?!\\d)\\w+/,\n      lookbehind: true\n    }, /^\\/?(?!\\d)\\w+/, /(?!\\d)\\w+(?=\\()/],\n    'attr-name': {\n      // Value is made optional because it may have already been tokenized\n      pattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,\n      inside: {\n        \"variable\": {\n          pattern: /(=\\s*)(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        \"operator\": /=/\n      }\n    },\n    'punctuation': [/[\\[\\]().,:`]|->/],\n    'operator': [/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/, /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/, /\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/],\n    'keyword': /\\b(?:false|off|on|no|true|yes)\\b/\n  }; // Tokenize all inline Smarty expressions\n\n  Prism.hooks.add('before-tokenize', function (env) {\n    var smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g;\n    var smartyLitteralStart = '{literal}';\n    var smartyLitteralEnd = '{/literal}';\n    var smartyLitteralMode = false;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'smarty', smartyPattern, function (match) {\n      // Smarty tags inside {literal} block are ignored\n      if (match === smartyLitteralEnd) {\n        smartyLitteralMode = false;\n      }\n\n      if (!smartyLitteralMode) {\n        if (match === smartyLitteralStart) {\n          smartyLitteralMode = true;\n        }\n\n        return true;\n      }\n\n      return false;\n    });\n  }); // Re-insert the tokens after tokenizing\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty');\n  });\n})(Prism);"],"sourceRoot":""}