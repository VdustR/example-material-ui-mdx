{"version":3,"sources":["../node_modules/prismjs/components/prism-d.js"],"names":["Prism","languages","d","extend","string","number","pattern","lookbehind","keyword","operator","comment","concat","insertBefore","token-string","alias","property","register"],"mappings":"4EAAAA,MAAAC,UAAAC,EAAAF,MAAAC,UAAAE,OAAA,SACAC,OAAA,CACA,qCACA,6DAGA,iEACA,qBACA,gEACAC,OAAA,CAEA,wEACAC,QAAA,uFACAC,YAAA,IAGAC,QAAA,u0BACAC,SAAA,sHAEAT,MAAAC,UAAAC,EAAAQ,QAAA,CACA,WACA,CAEAJ,QAAA,iDACAC,YAAA,IACCI,OAAAX,MAAAC,UAAAC,EAAAQ,SACDV,MAAAC,UAAAW,aAAA,eACAC,eAAA,CAEAP,QAAA,6BACAQ,MAAA,YAGAd,MAAAC,UAAAW,aAAA,eACAG,SAAA,WAEAf,MAAAC,UAAAW,aAAA,gBACAI,SAAA,CAEAV,QAAA,sNACAQ,MAAA","file":"static/js/68.84e4ebe6.chunk.js","sourcesContent":["Prism.languages.d = Prism.languages.extend('clike', {\n  'string': [// r\"\", x\"\"\n  /\\b[rx]\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"[cwd]?/, // q\"[]\", q\"()\", q\"<>\", q\"{}\"\n  /\\bq\"(?:\\[[\\s\\S]*?\\]|\\([\\s\\S]*?\\)|<[\\s\\S]*?>|\\{[\\s\\S]*?\\})\"/, // q\"IDENT\n  // ...\n  // IDENT\"\n  /\\bq\"([_a-zA-Z][_a-zA-Z\\d]*)(?:\\r?\\n|\\r)[\\s\\S]*?(?:\\r?\\n|\\r)\\1\"/, // q\"//\", q\"||\", etc.\n  /\\bq\"(.)[\\s\\S]*?\\1\"/, // Characters\n  /'(?:\\\\'|\\\\?[^']+)'/, /([\"`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1[cwd]?/],\n  'number': [// The lookbehind and the negative look-ahead try to prevent bad highlighting of the .. operator\n  // Hexadecimal numbers must be handled separately to avoid problems with exponent \"e\"\n  /\\b0x\\.?[a-f\\d_]+(?:(?!\\.\\.)\\.[a-f\\d_]*)?(?:p[+-]?[a-f\\d_]+)?[ulfi]*/i, {\n    pattern: /((?:\\.\\.)?)(?:\\b0b\\.?|\\b|\\.)\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?[ulfi]*/i,\n    lookbehind: true\n  }],\n  // In order: $, keywords and special tokens, globally defined symbols\n  'keyword': /\\$|\\b(?:abstract|alias|align|asm|assert|auto|body|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|inout|int|interface|invariant|ireal|lazy|long|macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|public|pure|real|ref|return|scope|shared|short|static|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|__(?:(?:FILE|MODULE|LINE|FUNCTION|PRETTY_FUNCTION|DATE|EOF|TIME|TIMESTAMP|VENDOR|VERSION)__|gshared|traits|vector|parameters)|string|wstring|dstring|size_t|ptrdiff_t)\\b/,\n  'operator': /\\|[|=]?|&[&=]?|\\+[+=]?|-[-=]?|\\.?\\.\\.|=[>=]?|!(?:i[ns]\\b|<>?=?|>=?|=)?|\\bi[ns]\\b|(?:<[<>]?|>>?>?|\\^\\^|[*\\/%^~])=?/\n});\nPrism.languages.d.comment = [// Shebang\n/^\\s*#!.+/, // /+ +/\n{\n  // Allow one level of nesting\n  pattern: /(^|[^\\\\])\\/\\+(?:\\/\\+[\\s\\S]*?\\+\\/|[\\s\\S])*?\\+\\//,\n  lookbehind: true\n}].concat(Prism.languages.d.comment);\nPrism.languages.insertBefore('d', 'comment', {\n  'token-string': {\n    // Allow one level of nesting\n    pattern: /\\bq\\{(?:\\{[^}]*\\}|[^}])*\\}/,\n    alias: 'string'\n  }\n});\nPrism.languages.insertBefore('d', 'keyword', {\n  'property': /\\B@\\w*/\n});\nPrism.languages.insertBefore('d', 'function', {\n  'register': {\n    // Iasm registers\n    pattern: /\\b(?:[ABCD][LHX]|E[ABCD]X|E?(?:BP|SP|DI|SI)|[ECSDGF]S|CR[0234]|DR[012367]|TR[3-7]|X?MM[0-7]|R[ABCD]X|[BS]PL|R[BS]P|[DS]IL|R[DS]I|R(?:[89]|1[0-5])[BWD]?|XMM(?:[89]|1[0-5])|YMM(?:1[0-5]|\\d))\\b|\\bST(?:\\([0-7]\\)|\\b)/,\n    alias: 'variable'\n  }\n});"],"sourceRoot":""}