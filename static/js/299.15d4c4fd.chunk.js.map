{"version":3,"sources":["../node_modules/prismjs/components/prism-soy.min.js"],"names":["t","e","a","languages","soy","comment","pattern","lookbehind","greedy","command-arg","alias","inside","punctuation","parameter","keyword","delimiter","property","variable","string","number","function","boolean","operator","hooks","add","buildPlaceholders","tokenizePlaceholders","Prism"],"mappings":"8EAAA,SAAAA,GACA,IAAAC,EAAA,iDACAC,EAAA,oDACAF,EAAAG,UAAAC,IAAA,CACAC,QAAA,qBACAC,QAAA,aACAC,YAAA,EACAC,QAAA,IAEAC,cAAA,CACAH,QAAA,yFACAC,YAAA,EACAG,MAAA,SACAC,OAAA,CACAC,YAAA,OAGAC,UAAA,CACAP,QAAA,mCACAC,YAAA,EACAG,MAAA,YAEAI,QAAA,EACAR,QAAA,kNACAC,YAAA,GACK,2FACLQ,UAAA,CACAT,QAAA,gBACAI,MAAA,eAEAM,SAAA,WACAC,SAAA,CACAX,QAAA,0CACAK,OAAA,CACAO,OAAA,CACAZ,QAAAL,EACAO,QAAA,GAEAW,OAAAjB,EACAU,YAAA,aAGAM,OAAA,CACAZ,QAAAL,EACAO,QAAA,GAEAY,SAAA,cACAd,QAAA,oBACAC,YAAA,IAEAc,QAAA,qBACAF,OAAAjB,EACAoB,SAAA,kDACAV,YAAA,kBACGZ,EAAAuB,MAAAC,IAAA,2BAAAvB,GACH,IAAAC,GAAA,EACAF,EAAAG,UAAA,qBAAAsB,kBAAAxB,EAAA,iDAA+E,SAAAA,GAC/E,qBAAwBA,IAAAC,GAAA,IAAAA,IAAA,cAAsCD,IAAAC,GAAA,WAE3DF,EAAAuB,MAAAC,IAAA,0BAAAvB,GACHD,EAAAG,UAAA,qBAAAuB,qBAAAzB,EAAA,SA5DA,CA8DC0B","file":"static/js/299.15d4c4fd.chunk.js","sourcesContent":["!function (t) {\n  var e = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      a = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;\n  t.languages.soy = {\n    comment: [/\\/\\*[\\s\\S]*?\\*\\//, {\n      pattern: /(\\s)\\/\\/.*/,\n      lookbehind: !0,\n      greedy: !0\n    }],\n    \"command-arg\": {\n      pattern: /({+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n      lookbehind: !0,\n      alias: \"string\",\n      inside: {\n        punctuation: /\\./\n      }\n    },\n    parameter: {\n      pattern: /({+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n      lookbehind: !0,\n      alias: \"variable\"\n    },\n    keyword: [{\n      pattern: /({+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n      lookbehind: !0\n    }, /\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/],\n    delimiter: {\n      pattern: /^{+\\/?|\\/?}+$/,\n      alias: \"punctuation\"\n    },\n    property: /\\w+(?==)/,\n    variable: {\n      pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+]))*/,\n      inside: {\n        string: {\n          pattern: e,\n          greedy: !0\n        },\n        number: a,\n        punctuation: /[\\[\\].?]/\n      }\n    },\n    string: {\n      pattern: e,\n      greedy: !0\n    },\n    function: [/\\w+(?=\\()/, {\n      pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n      lookbehind: !0\n    }],\n    boolean: /\\b(?:true|false)\\b/,\n    number: a,\n    operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n    punctuation: /[{}()\\[\\]|.,:]/\n  }, t.hooks.add(\"before-tokenize\", function (e) {\n    var a = !1;\n    t.languages[\"markup-templating\"].buildPlaceholders(e, \"soy\", /{{.+?}}|{.+?}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g, function (e) {\n      return \"{/literal}\" === e && (a = !1), !a && (\"{literal}\" === e && (a = !0), !0);\n    });\n  }), t.hooks.add(\"after-tokenize\", function (e) {\n    t.languages[\"markup-templating\"].tokenizePlaceholders(e, \"soy\");\n  });\n}(Prism);"],"sourceRoot":""}