{"version":3,"sources":["../node_modules/prismjs/components/prism-markup.js"],"names":["Prism","languages","markup","pattern","greedy","inside","lookbehind","hooks","add","env","type","attributes","content","replace","Object","defineProperty","tag","value","tagName","lang","includedCdataInside","def","RegExp","source","insertBefore","xml","extend","html","mathml","svg"],"mappings":"iIAAAA,MAAMC,UAAUC,OAAS,CACvB,QAAW,kBACX,OAAU,iBACV,QAAW,sBACX,MAAS,0BACT,IAAO,CACLC,QAAS,yHACTC,QAAQ,EACRC,OAAQ,CACN,IAAO,CACLF,QAAS,kBACTE,OAAQ,CACN,YAAe,QACf,UAAa,iBAGjB,aAAc,CACZF,QAAS,sCACTE,OAAQ,CACN,YAAe,CAAC,KAAM,CACpBF,QAAS,mBACTG,YAAY,MAIlB,YAAe,OACf,YAAa,CACXH,QAAS,YACTE,OAAQ,CACN,UAAa,mBAKrB,OAAU,qBAEZL,MAAMC,UAAUC,OAAY,IAAEG,OAAO,cAAcA,OAAe,OAAIL,MAAMC,UAAUC,OAAe,OAErGF,MAAMO,MAAMC,IAAI,OAAQ,SAAUC,GACf,WAAbA,EAAIC,OACND,EAAIE,WAAkB,MAAIF,EAAIG,QAAQC,QAAQ,QAAS,QAG3DC,OAAOC,eAAef,MAAMC,UAAUC,OAAOc,IAAK,aAAc,CAY9DC,MAAO,SAAoBC,EAASC,GAClC,IAAIC,EAAsB,GAC1BA,EAAoB,YAAcD,GAAQ,CACxChB,QAAS,oCACTG,YAAY,EACZD,OAAQL,MAAMC,UAAUkB,IAE1BC,EAA2B,MAAI,uBAC/B,IAAIf,EAAS,CACX,iBAAkB,CAChBF,QAAS,4BACTE,OAAQe,IAGZf,EAAO,YAAcc,GAAQ,CAC3BhB,QAAS,UACTE,OAAQL,MAAMC,UAAUkB,IAE1B,IAAIE,EAAM,GACVA,EAAIH,GAAW,CACbf,QAASmB,OAAO,mEAAmEC,OAAOV,QAAQ,MAAOK,GAAU,KACnHZ,YAAY,EACZF,QAAQ,EACRC,OAAQA,GAEVL,MAAMC,UAAUuB,aAAa,SAAU,QAASH,MAGpDrB,MAAMC,UAAUwB,IAAMzB,MAAMC,UAAUyB,OAAO,SAAU,IACvD1B,MAAMC,UAAU0B,KAAO3B,MAAMC,UAAUC,OACvCF,MAAMC,UAAU2B,OAAS5B,MAAMC,UAAUC,OACzCF,MAAMC,UAAU4B,IAAM7B,MAAMC,UAAUC","file":"static/js/202.e9dbb6df.chunk.js","sourcesContent":["Prism.languages.markup = {\n  'comment': /<!--[\\s\\S]*?-->/,\n  'prolog': /<\\?[\\s\\S]+?\\?>/,\n  'doctype': /<!DOCTYPE[\\s\\S]+?>/i,\n  'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/i,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\n        inside: {\n          'punctuation': [/^=/, {\n            pattern: /^(\\s*)[\"']|[\"']$/,\n            lookbehind: true\n          }]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': /&#?[\\da-z]{1,8};/i\n};\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity']; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nPrism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: Prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, tagName), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    Prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;"],"sourceRoot":""}