{"version":3,"sources":["../node_modules/prismjs/components/prism-rust.js"],"names":["Prism","languages","rust","comment","pattern","lookbehind","string","greedy","char","alias","lifetime-annotation","keyword","attribute","function","macro-rules","number","closure-params","inside","punctuation","operator"],"mappings":"6EAMAA,MAAAC,UAAAC,KAAA,CACAC,QAAA,EACAC,QAAA,4BACAC,YAAA,GACG,CACHD,QAAA,mBACAC,YAAA,IAEAC,OAAA,EACAF,QAAA,uCACAG,QAAA,GACG,CACHH,QAAA,0BACAG,QAAA,IAEAC,KAAA,CACAJ,QAAA,wEACAK,MAAA,UAEAC,sBAAA,CACAN,QAAA,YACAK,MAAA,UAEAE,QAAA,iTACAC,UAAA,CACAR,QAAA,aACAG,QAAA,EACAE,MAAA,aAEAI,SAAA,gBACA,oBACAC,cAAA,CACAV,QAAA,OACAK,MAAA,YAGAM,OAAA,kKAEAC,iBAAA,CACAZ,QAAA,uBACAa,OAAA,CACAC,YAAA,QACAC,SAAA,SAGAD,YAAA,sBACAC,SAAA","file":"static/js/282.a891ec74.chunk.js","sourcesContent":["/* TODO\n\tAdd support for Markdown notation inside doc comments\n\tAdd support for nested block comments...\n\tMatch closure params even when not followed by dash or brace\n\tAdd better support for macro definition\n*/\nPrism.languages.rust = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'string': [{\n    pattern: /b?r(#*)\"(?:\\\\.|(?!\"\\1)[^\\\\\\r\\n])*\"\\1/,\n    greedy: true\n  }, {\n    pattern: /b?\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }],\n  'char': {\n    pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u{(?:[\\da-fA-F]_*){1,6}|.)|[^\\\\\\r\\n\\t'])'/,\n    alias: 'string'\n  },\n  'lifetime-annotation': {\n    pattern: /'[^\\s>']+/,\n    alias: 'symbol'\n  },\n  'keyword': /\\b(?:abstract|alignof|as|be|box|break|const|continue|crate|do|dyn|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|match|mod|move|mut|offsetof|once|override|priv|pub|pure|ref|return|sizeof|static|self|Self|struct|super|true|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n  'attribute': {\n    pattern: /#!?\\[.+?\\]/,\n    greedy: true,\n    alias: 'attr-name'\n  },\n  'function': [/\\w+(?=\\s*\\()/, // Macros can use parens or brackets\n  /\\w+!(?=\\s*\\(|\\[)/],\n  'macro-rules': {\n    pattern: /\\w+!/,\n    alias: 'function'\n  },\n  // Hex, oct, bin, dec numbers with visual separators and type suffix\n  'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64)?|f32|f64))?\\b/,\n  // Closure params should not be confused with bitwise OR |\n  'closure-params': {\n    pattern: /\\|[^|]*\\|(?=\\s*[{-])/,\n    inside: {\n      'punctuation': /[|:,]/,\n      'operator': /[&*]/\n    }\n  },\n  'punctuation': /[{}[\\];(),:]|\\.+|->/,\n  'operator': /[-+*\\/%!^]=?|=[=>]?|@|&[&=]?|\\|[|=]?|<<?=?|>>?=?/\n};"],"sourceRoot":""}