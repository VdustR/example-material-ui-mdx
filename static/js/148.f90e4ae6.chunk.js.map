{"version":3,"sources":["../node_modules/prismjs/components/prism-javadoclike.js"],"names":["Prism","javaDocLike","languages","javadoclike","parameter","pattern","lookbehind","keyword","punctuation","Object","defineProperty","value","docLanguage","forEach","lang","callback","grammar","token","definition","doc-comment","alias","insertBefore","RegExp","Array","isArray","i","l","length","docCommentSupport","inside","rest","addSupport"],"mappings":"8EAAA,SAAAA,GACA,IAAAC,EAAAD,EAAAE,UAAAC,YAAA,CACAC,UAAA,CACAC,QAAA,8DACAC,YAAA,GAEAC,QAAA,CAGAF,QAAA,qDACAC,YAAA,GAEAE,YAAA,QA2EAC,OAAAC,eAAAT,EAAA,cACAU,MAjBA,SAAAT,EAAAU,GACA,kBAAAV,IACAA,EAAA,CAAAA,IAGAA,EAAAW,QAAA,SAAAC,IAvDA,SAAAA,EAAAC,GACA,IACAC,EAAAhB,EAAAE,UAAAY,GAEA,GAAAE,EAAA,CAIA,IAAAC,EAAAD,EAPA,eASA,IAAAC,EAAA,CAEA,IAAAC,EAAA,CACAC,cAAA,CACAd,QAAA,yCACAe,MAAA,YAGAH,GADAD,EAAAhB,EAAAE,UAAAmB,aAAAP,EAAA,UAAAI,IAhBA,eA2BA,GAPAD,aAAAK,SAEAL,EAAAD,EAtBA,eAsBA,CACAX,QAAAY,IAIAM,MAAAC,QAAAP,GACA,QAAAQ,EAAA,EAAAC,EAAAT,EAAAU,OAAuCF,EAAAC,EAAOD,IAC9CR,EAAAQ,aAAAH,SACAL,EAAAQ,GAAA,CACApB,QAAAY,EAAAQ,KAIAV,EAAAE,EAAAQ,SAGAV,EAAAE,IAiBAW,CAAAd,EAAA,SAAAT,GACAA,EAAAwB,SACAxB,EAAAwB,OAAA,IAGAxB,EAAAwB,OAAAC,KAAAlB,SAQAX,EAAA8B,WAAA,4BAAA9B,GA1FA,CA2FCD","file":"static/js/148.f90e4ae6.chunk.js","sourcesContent":["(function (Prism) {\n  var javaDocLike = Prism.languages.javadoclike = {\n    'parameter': {\n      pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n      lookbehind: true\n    },\n    'keyword': {\n      // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n      // @word, {@word}\n      pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n      lookbehind: true\n    },\n    'punctuation': /[{}]/\n  };\n  /**\n   * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n   *\n   * @param {string} lang the language add doc comment support to.\n   * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n   */\n\n  function docCommentSupport(lang, callback) {\n    var tokenName = 'doc-comment';\n    var grammar = Prism.languages[lang];\n\n    if (!grammar) {\n      return;\n    }\n\n    var token = grammar[tokenName];\n\n    if (!token) {\n      // add doc comment: /** */\n      var definition = {};\n      definition[tokenName] = {\n        pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n        alias: 'comment'\n      };\n      grammar = Prism.languages.insertBefore(lang, 'comment', definition);\n      token = grammar[tokenName];\n    }\n\n    if (token instanceof RegExp) {\n      // convert regex to object\n      token = grammar[tokenName] = {\n        pattern: token\n      };\n    }\n\n    if (Array.isArray(token)) {\n      for (var i = 0, l = token.length; i < l; i++) {\n        if (token[i] instanceof RegExp) {\n          token[i] = {\n            pattern: token[i]\n          };\n        }\n\n        callback(token[i]);\n      }\n    } else {\n      callback(token);\n    }\n  }\n  /**\n   * Adds doc-comment support to the given languages for the given documentation language.\n   *\n   * @param {string[]|string} languages\n   * @param {Object} docLanguage\n   */\n\n\n  function addSupport(languages, docLanguage) {\n    if (typeof languages === 'string') {\n      languages = [languages];\n    }\n\n    languages.forEach(function (lang) {\n      docCommentSupport(lang, function (pattern) {\n        if (!pattern.inside) {\n          pattern.inside = {};\n        }\n\n        pattern.inside.rest = docLanguage;\n      });\n    });\n  }\n\n  Object.defineProperty(javaDocLike, 'addSupport', {\n    value: addSupport\n  });\n  javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n})(Prism);"],"sourceRoot":""}