{"version":3,"sources":["../node_modules/prismjs/components/prism-coffeescript.js"],"names":["Prism","comment","interpolation","pattern","alias","languages","coffeescript","extend","string","greedy","inside","keyword","class-member","insertBefore","multiline-comment","block-regex","inline-javascript","delimiter","rest","javascript","multiline-string","property","coffee"],"mappings":"4EAAA,SAAAA,GAEA,IAAAC,EAAA,YACAC,EAAA,CACAC,QAAA,aACAC,MAAA,YAEAJ,EAAAK,UAAAC,aAAAN,EAAAK,UAAAE,OAAA,cACAN,UACAO,OAAA,CACA,CACAL,QAAA,yBACAM,QAAA,GACK,CAELN,QAAA,yBACAM,QAAA,EACAC,OAAA,CACAR,mBAGAS,QAAA,mSACAC,eAAA,CACAT,QAAA,aACAC,MAAA,cAGAJ,EAAAK,UAAAQ,aAAA,0BACAC,oBAAA,CACAX,QAAA,iBACAC,MAAA,WAGAW,cAAA,CACAZ,QAAA,qBACAC,MAAA,QACAM,OAAA,CACAT,UACAC,oBAIAF,EAAAK,UAAAQ,aAAA,yBACAG,oBAAA,CACAb,QAAA,yBACAO,OAAA,CACAO,UAAA,CACAd,QAAA,QACAC,MAAA,eAEAc,KAAAlB,EAAAK,UAAAc,aAIAC,mBAAA,EACAjB,QAAA,iBACAM,QAAA,EACAL,MAAA,UACK,CACLD,QAAA,iBACAM,QAAA,EACAL,MAAA,SACAM,OAAA,CACAR,qBAIAF,EAAAK,UAAAQ,aAAA,0BAEAQ,SAAA,kCAEArB,EAAAK,UAAAC,aAAA,mBACAN,EAAAK,UAAAiB,OAAAtB,EAAAK,UAAAC,aAxEA,CAyECN","file":"static/js/52.d31a4273.chunk.js","sourcesContent":["(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/,\n      interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.javascript\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(Prism);"],"sourceRoot":""}