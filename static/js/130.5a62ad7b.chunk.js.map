{"version":3,"sources":["../node_modules/prismjs/components/prism-http.js"],"names":["Prism","languages","http","request-line","pattern","inside","property","attr-name","response-status","lookbehind","header-name","alias","options","langs","httpLanguages","application/javascript","javascript","application/json","json","application/xml","xml","text/xml","text/html","html","text/css","css","suffixTypes","getSuffixPattern","contentType","suffix","replace","RegExp","rest","insertBefore"],"mappings":"8EAAA,SAAAA,GACAA,EAAAC,UAAAC,KAAA,CACAC,eAAA,CACAC,QAAA,8FACAC,OAAA,CAEAC,SAAA,yDAEAC,YAAA,SAGAC,kBAAA,CACAJ,QAAA,uBACAC,OAAA,CAEAC,SAAA,CACAF,QAAA,yBACAK,YAAA,KAKAC,cAAA,CACAN,QAAA,iBACAO,MAAA,YAIA,IA6BAC,EA7BAC,EAAAb,EAAAC,UACAa,EAAA,CACAC,yBAAAF,EAAAG,WACAC,mBAAAJ,EAAAK,MAAAL,EAAAG,WACAG,kBAAAN,EAAAO,IACAC,WAAAR,EAAAO,IACAE,YAAAT,EAAAU,KACAC,WAAAX,EAAAY,KAGAC,EAAA,CACAT,oBAAA,EACAE,mBAAA,GASA,SAAAQ,EAAAC,GACA,IAAAC,EAAAD,EAAAE,QAAA,gBAEA,YAAAF,EAAA,KADA,wBAAAC,EAAA,gBACA,IAOA,QAAAD,KAAAd,EACA,GAAAA,EAAAc,GAAA,CACAhB,KAAA,GACA,IAAAR,EAAAsB,EAAAE,GAAAD,EAAAC,KACAhB,EAAAgB,GAAA,CACAxB,QAAA2B,OAAA,qBAAA3B,EAAA,yCAAuF,KACvFK,YAAA,EACAJ,OAAA,CACA2B,KAAAlB,EAAAc,KAMAhB,GACAZ,EAAAC,UAAAgC,aAAA,qBAAArB,GA1EA,CA4ECZ","file":"static/js/130.5a62ad7b.chunk.js","sourcesContent":["(function (Prism) {\n  Prism.languages.http = {\n    'request-line': {\n      pattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,\n      inside: {\n        // HTTP Verb\n        'property': /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\n        // Path or query argument\n        'attr-name': /:\\w+/\n      }\n    },\n    'response-status': {\n      pattern: /^HTTP\\/1.[01] \\d+.*/m,\n      inside: {\n        // Status, e.g. 200 OK\n        'property': {\n          pattern: /(^HTTP\\/1.[01] )\\d+.*/i,\n          lookbehind: true\n        }\n      }\n    },\n    // HTTP header name\n    'header-name': {\n      pattern: /^[\\w-]+:(?=.)/m,\n      alias: 'keyword'\n    }\n  }; // Create a mapping of Content-Type headers to language definitions\n\n  var langs = Prism.languages;\n  var httpLanguages = {\n    'application/javascript': langs.javascript,\n    'application/json': langs.json || langs.javascript,\n    'application/xml': langs.xml,\n    'text/xml': langs.xml,\n    'text/html': langs.html,\n    'text/css': langs.css\n  }; // Declare which types can also be suffixes\n\n  var suffixTypes = {\n    'application/json': true,\n    'application/xml': true\n  };\n  /**\n   * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n   *\n   * @param {string} contentType\n   * @returns {string}\n   */\n\n  function getSuffixPattern(contentType) {\n    var suffix = contentType.replace(/^[a-z]+\\//, '');\n    var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';\n    return '(?:' + contentType + '|' + suffixPattern + ')';\n  } // Insert each content type parser that has its associated language\n  // currently loaded.\n\n\n  var options;\n\n  for (var contentType in httpLanguages) {\n    if (httpLanguages[contentType]) {\n      options = options || {};\n      var pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n      options[contentType] = {\n        pattern: RegExp('(content-type:\\\\s*' + pattern + '[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*', 'i'),\n        lookbehind: true,\n        inside: {\n          rest: httpLanguages[contentType]\n        }\n      };\n    }\n  }\n\n  if (options) {\n    Prism.languages.insertBefore('http', 'header-name', options);\n  }\n})(Prism);"],"sourceRoot":""}