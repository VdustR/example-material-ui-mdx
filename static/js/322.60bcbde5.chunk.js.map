{"version":3,"sources":["../node_modules/prismjs/components/prism-tt2.js"],"names":["Prism","languages","tt2","extend","comment","pattern","lookbehind","keyword","punctuation","insertBefore","operator","variable","delimiter","alias","single-quoted-string","greedy","double-quoted-string","inside","string","hooks","add","env","buildPlaceholders","tokenizePlaceholders"],"mappings":"8EAAA,SAAAA,GACAA,EAAAC,UAAAC,IAAAF,EAAAC,UAAAE,OAAA,SACAC,QAAA,CACAC,QAAA,sBACAC,YAAA,GAEAC,QAAA,0NACAC,YAAA,eAEAR,EAAAC,UAAAQ,aAAA,gBACAC,SAAA,iDACAC,SAAA,CACAN,QAAA,+CAGAL,EAAAC,UAAAQ,aAAA,iBACAG,UAAA,CACAP,QAAA,sBACAQ,MAAA,iBAGAb,EAAAC,UAAAQ,aAAA,gBACAK,uBAAA,CACAT,QAAA,gCACAU,QAAA,EACAF,MAAA,UAEAG,uBAAA,CACAX,QAAA,gCACAU,QAAA,EACAF,MAAA,SACAI,OAAA,CACAN,SAAA,CACAN,QAAA,wDAMAL,EAAAC,UAAAC,IAAAgB,OACAlB,EAAAmB,MAAAC,IAAA,2BAAAC,GAEArB,EAAAC,UAAA,qBAAAqB,kBAAAD,EAAA,MADA,qBAGArB,EAAAmB,MAAAC,IAAA,0BAAAC,GACArB,EAAAC,UAAA,qBAAAsB,qBAAAF,EAAA,SA7CA,CA+CCrB","file":"static/js/322.60bcbde5.chunk.js","sourcesContent":["(function (Prism) {\n  Prism.languages.tt2 = Prism.languages.extend('clike', {\n    comment: {\n      pattern: /#.*|\\[%#[\\s\\S]*?%\\]/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,\n    punctuation: /[[\\]{},()]/\n  });\n  Prism.languages.insertBefore('tt2', 'number', {\n    operator: /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,\n    variable: {\n      pattern: /[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*/i\n    }\n  });\n  Prism.languages.insertBefore('tt2', 'keyword', {\n    'delimiter': {\n      pattern: /^(?:\\[%|%%)-?|-?%]$/,\n      alias: 'punctuation'\n    }\n  });\n  Prism.languages.insertBefore('tt2', 'string', {\n    'single-quoted-string': {\n      pattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,\n      greedy: true,\n      alias: 'string'\n    },\n    'double-quoted-string': {\n      pattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        variable: {\n          pattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i\n        }\n      }\n    }\n  }); // The different types of TT2 strings \"replace\" the C-like standard string\n\n  delete Prism.languages.tt2.string;\n  Prism.hooks.add('before-tokenize', function (env) {\n    var tt2Pattern = /\\[%[\\s\\S]+?%\\]/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'tt2', tt2Pattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2');\n  });\n})(Prism);"],"sourceRoot":""}