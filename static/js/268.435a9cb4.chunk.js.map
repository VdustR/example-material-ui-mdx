{"version":3,"sources":["../node_modules/prismjs/components/prism-reason.js"],"names":["Prism","languages","reason","extend","comment","pattern","lookbehind","string","greedy","class-name","keyword","operator","insertBefore","character","alias","constructor","label","function"],"mappings":"6EAAAA,MAAAC,UAAAC,OAAAF,MAAAC,UAAAE,OAAA,SACAC,QAAA,CACAC,QAAA,4BACAC,YAAA,GAEAC,OAAA,CACAF,QAAA,sCACAG,QAAA,GAGAC,aAAA,aACAC,QAAA,4RACAC,SAAA,wGAEAX,MAAAC,UAAAW,aAAA,uBACAC,UAAA,CACAR,QAAA,gEACAS,MAAA,UAEAC,YAAA,CAEAV,QAAA,wBACAS,MAAA,YAEAE,MAAA,CACAX,QAAA,mBACAS,MAAA,mBAIAd,MAAAC,UAAAC,OAAAe","file":"static/js/268.435a9cb4.chunk.js","sourcesContent":["Prism.languages.reason = Prism.languages.extend('clike', {\n  'comment': {\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n});\nPrism.languages.insertBefore('reason', 'class-name', {\n  'character': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    alias: 'string'\n  },\n  'constructor': {\n    // Negative look-ahead prevents from matching things like String.capitalize\n    pattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    alias: 'variable'\n  },\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete Prism.languages.reason.function;"],"sourceRoot":""}