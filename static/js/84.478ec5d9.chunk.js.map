{"version":3,"sources":["../node_modules/prismjs/components/prism-elixir.js"],"names":["Prism","languages","elixir","comment","pattern","lookbehind","regex","greedy","string","inside","atom","alias","attr-name","capture","argument","attribute","number","keyword","boolean","operator","punctuation","forEach","o","interpolation","delimiter","rest"],"mappings":"4EAAAA,MAAAC,UAAAC,OAAA,CACAC,QAAA,CACAC,QAAA,OACAC,YAAA,GAGAC,MAAA,CACAF,QAAA,6LACAG,QAAA,GAEAC,OAAA,EAEAJ,QAAA,wMACAG,QAAA,EACAE,OAAA,IAEG,CACHL,QAAA,sBACAG,QAAA,EACAE,OAAA,IAEG,CAEHL,QAAA,gDACAG,QAAA,EACAE,OAAA,KAGAC,KAAA,CAEAN,QAAA,eACAC,YAAA,EACAM,MAAA,UAGAC,YAAA,YACAC,QAAA,CAEAT,QAAA,yCACAC,YAAA,EACAM,MAAA,YAEAG,SAAA,CAEAV,QAAA,eACAC,YAAA,EACAM,MAAA,YAEAI,UAAA,CACAX,QAAA,OACAO,MAAA,YAEAK,OAAA,kEACAC,QAAA,0KACAC,QAAA,yBACAC,SAAA,6FAEAf,QAAA,eACAC,YAAA,GACG,CAEHD,QAAA,eACAC,YAAA,IAEAe,YAAA,uBAEApB,MAAAC,UAAAC,OAAAM,OAAAa,QAAA,SAAAC,GACAA,EAAAb,OAAA,CACAc,cAAA,CACAnB,QAAA,aACAK,OAAA,CACAe,UAAA,CACApB,QAAA,WACAO,MAAA,eAEAc,KAAAzB,MAAAC,UAAAC","file":"static/js/84.478ec5d9.chunk.js","sourcesContent":["Prism.languages.elixir = {\n  'comment': {\n    pattern: /#.*/m,\n    lookbehind: true\n  },\n  // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n  'regex': {\n    pattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n    greedy: true\n  },\n  'string': [{\n    // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n    pattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n    greedy: true,\n    inside: {// See interpolation below\n    }\n  }, {\n    pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n    greedy: true,\n    inside: {// See interpolation below\n    }\n  }, {\n    // Multi-line strings are allowed\n    pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true,\n    inside: {// See interpolation below\n    }\n  }],\n  'atom': {\n    // Look-behind prevents bad highlighting of the :: operator\n    pattern: /(^|[^:]):\\w+/,\n    lookbehind: true,\n    alias: 'symbol'\n  },\n  // Look-ahead prevents bad highlighting of the :: operator\n  'attr-name': /\\w+:(?!:)/,\n  'capture': {\n    // Look-behind prevents bad highlighting of the && operator\n    pattern: /(^|[^&])&(?:[^&\\s\\d()][^\\s()]*|(?=\\())/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'argument': {\n    // Look-behind prevents bad highlighting of the && operator\n    pattern: /(^|[^&])&\\d+/,\n    lookbehind: true,\n    alias: 'variable'\n  },\n  'attribute': {\n    pattern: /@\\w+/,\n    alias: 'variable'\n  },\n  'number': /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n  'keyword': /\\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\\b/,\n  'boolean': /\\b(?:true|false|nil)\\b/,\n  'operator': [/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/, {\n    // We don't want to match <<\n    pattern: /([^<])<(?!<)/,\n    lookbehind: true\n  }, {\n    // We don't want to match >>\n    pattern: /([^>])>(?!>)/,\n    lookbehind: true\n  }],\n  'punctuation': /<<|>>|[.,%\\[\\]{}()]/\n};\nPrism.languages.elixir.string.forEach(function (o) {\n  o.inside = {\n    'interpolation': {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        'delimiter': {\n          pattern: /^#\\{|\\}$/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.elixir\n      }\n    }\n  };\n});"],"sourceRoot":""}