{"version":3,"sources":["../node_modules/prismjs/components/prism-sass.js"],"names":["Prism","languages","sass","extend","comment","pattern","lookbehind","insertBefore","atrule-line","inside","atrule","variable","operator","variable-line","punctuation","property-line","property","important","selector"],"mappings":"8EAAA,SAAAA,GACAA,EAAAC,UAAAC,KAAAF,EAAAC,UAAAE,OAAA,OAEAC,QAAA,CACAC,QAAA,iDACAC,YAAA,KAGAN,EAAAC,UAAAM,aAAA,iBAEAC,cAAA,CAEAH,QAAA,sBACAI,OAAA,CACAC,OAAA,+BAIAV,EAAAC,UAAAC,KAAAQ,OACA,IAAAC,EAAA,yBACAC,EAAA,6CACAP,QAAA,eACAC,YAAA,IAEAN,EAAAC,UAAAM,aAAA,mBAEAM,gBAAA,CACAR,QAAA,eACAI,OAAA,CACAK,YAAA,IACAH,WACAC,aAIAG,gBAAA,CACAV,QAAA,sCACAI,OAAA,CACAO,SAAA,oBACAX,QAAA,aACAC,YAAA,IAEAQ,YAAA,IACAH,WACAC,WACAK,UAAAjB,EAAAC,UAAAC,KAAAe,qBAIAjB,EAAAC,UAAAC,KAAAc,gBACAhB,EAAAC,UAAAC,KAAAe,UAGAjB,EAAAC,UAAAM,aAAA,sBACAW,SAAA,CACAb,QAAA,yEACAC,YAAA,KAxDA,CA2DCN","file":"static/js/286.de092740.chunk.js","sourcesContent":["(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s+)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n      lookbehind: true\n    }\n  });\n})(Prism);"],"sourceRoot":""}