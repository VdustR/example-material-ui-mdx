{"version":3,"sources":["../node_modules/prismjs/components/prism-puppet.min.js"],"names":["e","languages","puppet","heredoc","pattern","lookbehind","alias","inside","punctuation","greedy","multiline-comment","regex","extended-regex","comment","string","double-quoted","variable","attr-name","function","number","boolean","keyword","datatype","operator","n","short-variable","delimiter","rest","interpolation","Prism"],"mappings":"8EAAA,SAAAA,GACAA,EAAAC,UAAAC,OAAA,CACAC,QAAA,EACAC,QAAA,uGACAC,YAAA,EACAC,MAAA,SACAC,OAAA,CACAC,YAAA,sBAEK,CACLJ,QAAA,qGACAC,YAAA,EACAI,QAAA,EACAH,MAAA,SACAC,OAAA,CACAC,YAAA,sBAEK,CACLJ,QAAA,8CACAE,MAAA,SACAC,OAAA,CACAC,YAAA,CACAJ,QAAA,gBACAC,YAAA,MAIAK,oBAAA,CACAN,QAAA,4BACAC,YAAA,EACAI,QAAA,EACAH,MAAA,WAEAK,MAAA,CACAP,QAAA,uFACAC,YAAA,EACAI,QAAA,EACAF,OAAA,CACAK,iBAAA,CACAR,QAAA,yCACAG,OAAA,CACAM,QAAA,UAKAA,QAAA,CACAT,QAAA,eACAC,YAAA,EACAI,QAAA,GAEAK,OAAA,CACAV,QAAA,wFACAK,QAAA,EACAF,OAAA,CACAQ,gBAAA,CACAX,QAAA,cACAG,OAAA,MAIAS,SAAA,CACAZ,QAAA,yBACAG,OAAA,CACAC,YAAA,OAGAS,YAAA,sBACAC,SAAA,EACAd,QAAA,gBACAC,YAAA,GACK,oGACLc,OAAA,+CACAC,QAAA,qBACAC,QAAA,6IACAC,SAAA,CACAlB,QAAA,gNACAE,MAAA,UAEAiB,SAAA,mFACAf,YAAA,oBAEA,IAAAgB,EAAA,EACApB,QAAA,0EACAC,YAAA,EACAE,OAAA,CACAkB,iBAAA,CACArB,QAAA,uCACAC,YAAA,EACAC,MAAA,WACAC,OAAA,CACAC,YAAA,OAGAkB,UAAA,CACAtB,QAAA,MACAE,MAAA,YAEAqB,KAAA3B,EAAAC,UAAAC,SAEG,CACHE,QAAA,kCACAC,YAAA,EACAC,MAAA,WACAC,OAAA,CACAC,YAAA,QAGAR,EAAAC,UAAAC,OAAAC,QAAA,GAAAI,OAAAqB,cAAAJ,EAAAxB,EAAAC,UAAAC,OAAAY,OAAAP,OAAA,iBAAAA,OAAAqB,cAAAJ,EA5GA,CA6GCK","file":"static/js/257.16c9f62d.chunk.js","sourcesContent":["!function (e) {\n  e.languages.puppet = {\n    heredoc: [{\n      pattern: /(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,\n      lookbehind: !0,\n      alias: \"string\",\n      inside: {\n        punctuation: /(?=\\S).*\\S(?= *$)/\n      }\n    }, {\n      pattern: /(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r))*?[ \\t]*\\|?[ \\t]*-?[ \\t]*\\2/,\n      lookbehind: !0,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        punctuation: /(?=\\S).*\\S(?= *$)/\n      }\n    }, {\n      pattern: /@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,\n      alias: \"string\",\n      inside: {\n        punctuation: {\n          pattern: /(\\().+?(?=\\))/,\n          lookbehind: !0\n        }\n      }\n    }],\n    \"multiline-comment\": {\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n      lookbehind: !0,\n      greedy: !0,\n      alias: \"comment\"\n    },\n    regex: {\n      pattern: /((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,\n      lookbehind: !0,\n      greedy: !0,\n      inside: {\n        \"extended-regex\": {\n          pattern: /^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,\n          inside: {\n            comment: /#.*/\n          }\n        }\n      }\n    },\n    comment: {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: !0,\n      greedy: !0\n    },\n    string: {\n      pattern: /([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: !0,\n      inside: {\n        \"double-quoted\": {\n          pattern: /^\"[\\s\\S]*\"$/,\n          inside: {}\n        }\n      }\n    },\n    variable: {\n      pattern: /\\$(?:::)?\\w+(?:::\\w+)*/,\n      inside: {\n        punctuation: /::/\n      }\n    },\n    \"attr-name\": /(?:\\w+|\\*)(?=\\s*=>)/,\n    function: [{\n      pattern: /(\\.)(?!\\d)\\w+/,\n      lookbehind: !0\n    }, /\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/],\n    number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,\n    boolean: /\\b(?:true|false)\\b/,\n    keyword: /\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,\n    datatype: {\n      pattern: /\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,\n      alias: \"symbol\"\n    },\n    operator: /=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,\n    punctuation: /[\\[\\]{}().,;]|:+/\n  };\n  var n = [{\n    pattern: /(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,\n    lookbehind: !0,\n    inside: {\n      \"short-variable\": {\n        pattern: /(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,\n        lookbehind: !0,\n        alias: \"variable\",\n        inside: {\n          punctuation: /::/\n        }\n      },\n      delimiter: {\n        pattern: /^\\$/,\n        alias: \"variable\"\n      },\n      rest: e.languages.puppet\n    }\n  }, {\n    pattern: /(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,\n    lookbehind: !0,\n    alias: \"variable\",\n    inside: {\n      punctuation: /::/\n    }\n  }];\n  e.languages.puppet.heredoc[0].inside.interpolation = n, e.languages.puppet.string.inside[\"double-quoted\"].inside.interpolation = n;\n}(Prism);"],"sourceRoot":""}