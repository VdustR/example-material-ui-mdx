{"version":3,"sources":["../node_modules/prismjs/components/prism-php.js"],"names":["Prism","languages","php","extend","keyword","boolean","pattern","alias","constant","comment","lookbehind","insertBefore","shell-comment","delimiter","variable","package","inside","punctuation","property","string_interpolation","rest","nowdoc-string","greedy","heredoc-string","interpolation","single-quoted-string","double-quoted-string","hooks","add","env","test","code","buildPlaceholders","tokenizePlaceholders"],"mappings":"8EAYA,SAAAA,GACAA,EAAAC,UAAAC,IAAAF,EAAAC,UAAAE,OAAA,SACAC,QAAA,ueACAC,QAAA,CACAC,QAAA,sBACAC,MAAA,YAEAC,SAAA,yCACAC,QAAA,CACAH,QAAA,uCACAI,YAAA,KAGAV,EAAAC,UAAAU,aAAA,gBACAC,gBAAA,CACAN,QAAA,eACAI,YAAA,EACAH,MAAA,aAGAP,EAAAC,UAAAU,aAAA,iBACAE,UAAA,CACAP,QAAA,6BACAC,MAAA,eAGAP,EAAAC,UAAAU,aAAA,iBACAG,SAAA,sBACAC,QAAA,CACAT,QAAA,kCACAI,YAAA,EACAM,OAAA,CACAC,YAAA,SAKAjB,EAAAC,UAAAU,aAAA,kBACAO,SAAA,CACAZ,QAAA,YACAI,YAAA,KAGA,IAAAS,EAAA,CACAb,QAAA,6EACAI,YAAA,EACAM,OAAA,CACAI,KAAApB,EAAAC,UAAAC,MAGAF,EAAAC,UAAAU,aAAA,gBACAU,gBAAA,CACAf,QAAA,kDACAgB,QAAA,EACAf,MAAA,SACAS,OAAA,CACAH,UAAA,CACAP,QAAA,2BACAC,MAAA,SACAS,OAAA,CACAC,YAAA,mBAKAM,iBAAA,CACAjB,QAAA,sGACAgB,QAAA,EACAf,MAAA,SACAS,OAAA,CACAH,UAAA,CACAP,QAAA,yCACAC,MAAA,SACAS,OAAA,CACAC,YAAA,iBAGAO,cAAAL,IAIAM,uBAAA,CACAnB,QAAA,yBACAgB,QAAA,EACAf,MAAA,UAEAmB,uBAAA,CACApB,QAAA,yBACAgB,QAAA,EACAf,MAAA,SACAS,OAAA,CACAQ,cAAAL,aAMAnB,EAAAC,UAAAC,IAAA,OACAF,EAAA2B,MAAAC,IAAA,2BAAAC,GACA,SAAAC,KAAAD,EAAAE,MAAA,CAKA/B,EAAAC,UAAA,qBAAA+B,kBAAAH,EAAA,MADA,uIAGA7B,EAAA2B,MAAAC,IAAA,0BAAAC,GACA7B,EAAAC,UAAA,qBAAAgC,qBAAAJ,EAAA,SA3GA,CA6GC7B","file":"static/js/238.a9a5c60b.chunk.js","sourcesContent":["/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n(function (Prism) {\n  Prism.languages.php = Prism.languages.extend('clike', {\n    'keyword': /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n    'boolean': {\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: 'constant'\n    },\n    'constant': [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('php', 'string', {\n    'shell-comment': {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true,\n      alias: 'comment'\n    }\n  });\n  Prism.languages.insertBefore('php', 'comment', {\n    'delimiter': {\n      pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n      alias: 'important'\n    }\n  });\n  Prism.languages.insertBefore('php', 'keyword', {\n    'variable': /\\$+(?:\\w+\\b|(?={))/i,\n    'package': {\n      pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\\\/\n      }\n    }\n  }); // Must be defined after the function pattern\n\n  Prism.languages.insertBefore('php', 'operator', {\n    'property': {\n      pattern: /(->)[\\w]+/,\n      lookbehind: true\n    }\n  });\n  var string_interpolation = {\n    pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n    lookbehind: true,\n    inside: {\n      rest: Prism.languages.php\n    }\n  };\n  Prism.languages.insertBefore('php', 'string', {\n    'nowdoc-string': {\n      pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<'?|[';]$/\n          }\n        }\n      }\n    },\n    'heredoc-string': {\n      pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<\"?|[\";]$/\n          }\n        },\n        'interpolation': string_interpolation // See below\n\n      }\n    },\n    'single-quoted-string': {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true,\n      alias: 'string'\n    },\n    'double-quoted-string': {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'interpolation': string_interpolation // See below\n\n      }\n    }\n  }); // The different types of PHP strings \"replace\" the C-like standard string\n\n  delete Prism.languages.php['string'];\n  Prism.hooks.add('before-tokenize', function (env) {\n    if (!/<\\?/.test(env.code)) {\n      return;\n    }\n\n    var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/ig;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n  });\n})(Prism);"],"sourceRoot":""}